#!/usr/bin/env bash

# ~/.bashrc


fortune -a -e

# This is a dirty hack to make it easier to reset the keyboard. Udev rules did
# not solve this problem. Something about the right session not getting the new
# keyboard changes.
setxkbmap -option caps:escape

# This just ensures everything is there.
xrdb ~/.Xresources

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

bash_completion="/usr/share/bash-completion/bash_completion"
[[ -f "${bash_completion}" ]] && . "${bash_completion}"

function color() {
    echo "\[$(tput setaf "${1}")\]"

    if [[ "$#" -eq 2 ]]; then
        echo "\[$(tput setab "${2}")\]"
    fi
}

function reset_color() {
    echo "\[$(tput setaf 7)\]"
}

function success_prompt() {
    local last_status="${?}"
    local success="^_^"
    local failure="0_o"
    if [[ "${last_status}" != "0" ]]; then
        echo "$(color 1)${failure}$(reset_color)"
    else
        echo "$(color 2)${success}$(reset_color)"
    fi
}

function bash_prompt() {
    last_status=$(success_prompt)

    local login
    local time
    local directory

    login="$(color 4)\u$(reset_color)@$(color 6)\H$(reset_color)"
    time="$(color 5)\t$(reset_color)"
    directory="$(color 3)\w$(reset_color)"

    local virtualenv

    local sep="─"
    local sep="~"
    local lb="("
    local rb=")"

    if printenv VIRTUAL_ENV &>/dev/null; then
        virtualenv=$(printenv VIRTUAL_ENV | awk -F/ '{print $NF}')
        virtualenv="${sep}{${virtualenv}}"
    else
        virtualenv=""
    fi

    if git status &>/dev/null; then
        local gitbranch
        gitbranch=$(git branch | egrep "^\*" | awk '{print $NF}')

        local count_untracked="0"
        local count_staged="0"
        local count_modified="0"

        while IFS= read -r line; do
            x=$(echo "${line}" | head -c 1)
            y=$(echo "${line}" | head -c 2 | tail -c 1)

            #echo "x=$x y=$y"

            if [[ "$x" = "?" ]] && [[ "$y" = "?" ]]; then
                count_untracked=$((count_untracked + 1))
            elif [[ "$x" != " " ]] && [[ "$y" == " " ]]; then
                count_staged=$((count_staged + 1))
            elif [[ "$x" == " " ]] && [[ "$y" != " " ]]; then
                count_modified=$((count_modified + 1))
            fi
        done < <(git status -s)


        if [[ ${count_untracked} != 0 ]]; then
            count_untracked=" $(color 3)...${count_untracked}$(reset_color)"
        else
            count_untracked=""
        fi

        if [[ ${count_modified} != 0 ]]; then
            count_modified=" $(color 1)+${count_modified}$(reset_color)"
        else
            count_modified=""
        fi

        if [[ ${count_staged} != 0 ]]; then
            count_staged=" $(color 2)●${count_staged}$(reset_color)"
        else
            count_staged=""
        fi

        # M == Modified and Unstaged ●
        # D == Deleted  -
        # R == Renamed  R
        # C == Copied   C
        # U == Updated but Unmerged
        # A == Added
        # "??" == Untracked
        local gitprompt="${sep}${lb}${gitbranch}${count_staged}${count_modified}${count_untracked}${rb}"
    fi

    echo ""
    echo -n "${lb}${last_status}${rb}"
    echo -n "${sep}"
    echo -n "${lb}${time}${rb}"
    echo -n "${sep}"
    echo -n "${lb}${login}${rb}"
    echo -n "${virtualenv}"
    echo -n "${sep}"
    echo -n "${lb}${directory}${rb}"
    echo -n "${gitprompt}"
    echo ""
    echo "$ "
}


export PATH="$PATH:~/arc/arcanist/bin/"

PROMPT_COMMAND='PS1="$(bash_prompt)"'

BASE16_SHELL="$HOME/.config/base16-shell/scripts/base16-tomorrow-night.sh"
[[ -s "$BASE16_SHELL" ]] && source $BASE16_SHELL

export TERM='rxvt-256color'
export EDITOR='vim'

alias vim='vim -O'
alias ..='cd ..'
alias ...='cd ../..'
alias please='sudo'
alias ag="ag --color -H"
alias less="less -r"
alias tree="tree -C"

alias c='clear'
alias cls="clear && ls -l"
alias clt="clear && tree"
alias ls='ls --color=auto'
alias l='ls -oh --group-directories-first'
alias lt='ls -lhtc'
alias la='ls -lha --group-directories-first'
alias ll='ls -l --group-directories-first'
alias rm='rm -I'
alias grep='grep -i --color'

alias kc="eval \`keychain --eval --agents ssh --timeout 5 --quiet id_rsa\`"
alias kchour="eval \`keychain --eval --agents ssh --timeout 60 --quiet id_rsa\`"

# Aliases for Git:
alias g='/usr/bin/git status'
alias gu='/usr/bin/git pull'
alias gp='/usr/bin/git push'
alias ga='/usr/bin/git add'
alias gd='/usr/bin/git diff'
alias gb='/usr/bin/git branch'
alias gba='/usr/bin/git branch -a'
alias gc='/usr/bin/git commit'
alias gca='/usr/bin/git commit -a'
alias gco='/usr/bin/git checkout'
alias gm="/usr/bin/git merge --no-ff"
alias gff="/usr/bin/git merge --ff-only"
alias gl="/usr/bin/git log --date-order --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
alias gla="/usr/bin/git log --date-order --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --all"
alias gll="/usr/bin/git log --date-order --graph --oneline"

# Docker
alias d="/usr/bin/sudo /usr/bin/docker"
alias de="/usr/bin/sudo /usr/bin/docker exec"
alias dc="/usr/bin/sudo /usr/bin/docker container"
alias dca="/usr/bin/sudo /usr/bin/docker container attach"
alias dps="/usr/bin/sudo /usr/bin/docker container ls -a --format \"table {{.Names}} \t {{.Image}} \t {{.RunningFor}} \t {{.Status}} \t {{.Ports}}\" "

function dsh () {
    /usr/bin/sudo /usr/bin/docker exec -it $1 /bin/sh
}

# Docker Compose
alias dk="/usr/bin/sudo /usr/bin/docker-compose"
alias dkps="/usr/bin/sudo /usr/bin/docker-compose ps"

alias feh="feh --auto-zoom --borderless --draw-filename --geometry 800x600"

alias src="source ~/.bashrc"

alias C1="awk '{print \$1}'"
alias C2="awk '{print \$2}'"
alias C3="awk '{print \$3}'"
alias C4="awk '{print \$4}'"
alias C5="awk '{print \$5}'"
alias C6="awk '{print \$6}'"
alias C7="awk '{print \$7}'"
alias C8="awk '{print \$8}'"
alias sum="awk '{sum+=\$1} END {print sum}'"

function va() {
    for dir in .venv venv; do
        if [[ -d $dir ]]; then
            source "${dir}/bin/activate"
            return 0
        fi
    done
    echo "Failed to activate virtual environment."
    return 1
}

alias rebuild_ctags="cd ~/dev/; ctags -R --python-kinds=-i"
