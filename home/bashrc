#!/usr/bin/env bash

# ~/.bashrc

# Need to be PC
alias person=man

# This is a dirty hack to make it easier to reset the keyboard. Udev rules did
# not solve this problem. Something about the right session not getting the new
# keyboard changes.
#setxkbmap -option caps:escape

# This just ensures everything is there.
xrdb ~/.Xresources

source ~/.bash_aliases

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

bash_completion="/usr/share/bash-completion/bash_completion"
[[ -f "${bash_completion}" ]] && . "${bash_completion}"

# Add git completion to standard git commands and aliases.
if [ -f ~/.git-completion.bash ]; then
    . ~/.git-completion.bash

    # Add git completion to aliases
    __git_complete g  __git_main
    __git_complete gu  _git_pull
    __git_complete gp  _git_push
    __git_complete ga  _git_add
    __git_complete gd  _git_diff
    __git_complete gs  _git_stash
    __git_complete gb  _git_branch
    __git_complete gba _git_branch
    __git_complete gc  _git_commit
    __git_complete gca _git_commit
    __git_complete gco _git_checkout
    __git_complete gm  _git_merge
    __git_complete gff _git_merge
    __git_complete gl  _git_log
    __git_complete gla _git_log
    __git_complete gll _git_log
fi

function color() {
    echo "\[$(tput setaf "${1}")\]"

    if [[ "$#" -eq 2 ]]; then
        echo "\[$(tput setab "${2}")\]"
    fi
}

function reset_color() {
    echo "\[$(tput setaf 7)\]"
}

function success_prompt() {
    local last_status="${?}"
    local success="^_^"
    local failure="0_o"
    if [[ "${last_status}" != "0" ]]; then
        echo "$(color 1)${failure}$(reset_color)"
    else
        echo "$(color 2)${success}$(reset_color)"
    fi
}

function bash_prompt() {
    last_status=$(success_prompt)

    local login
    local time
    local directory

    login="$(color 4)\u$(reset_color)@$(color 6)\H$(reset_color)"
    time="$(color 5)\t$(reset_color)"
    directory="$(color 3)\w$(reset_color)"

    local virtualenv

    local sep="─"
    local sep="~"
    local lb="("
    local rb=")"

    if printenv VIRTUAL_ENV &>/dev/null; then
        virtualenv=$(printenv VIRTUAL_ENV | awk -F/ '{print $NF}')
        virtualenv="${sep}{${virtualenv}}"
    else
        virtualenv=""
    fi

    if git status &>/dev/null; then
        local gitbranch
        gitbranch=$(git branch | egrep "^\*" | awk '{print $NF}')

        local count_untracked="0"
        local count_staged="0"
        local count_modified="0"

        while IFS= read -r line; do
            x=$(echo "${line}" | head -c 1)
            y=$(echo "${line}" | head -c 2 | tail -c 1)

            #echo "x=$x y=$y"

            if [[ "$x" = "?" ]] && [[ "$y" = "?" ]]; then
                count_untracked=$((count_untracked + 1))
            elif [[ "$x" != " " ]] && [[ "$y" == " " ]]; then
                count_staged=$((count_staged + 1))
            elif [[ "$x" == " " ]] && [[ "$y" != " " ]]; then
                count_modified=$((count_modified + 1))
            fi
        done < <(git status -s)

        if [[ ${count_untracked} != 0 ]]; then
            count_untracked=" $(color 3)...${count_untracked}$(reset_color)"
        else
            count_untracked=""
        fi

        if [[ ${count_modified} != 0 ]]; then
            count_modified=" $(color 1)+${count_modified}$(reset_color)"
        else
            count_modified=""
        fi

        if [[ ${count_staged} != 0 ]]; then
            count_staged=" $(color 2)●${count_staged}$(reset_color)"
        else
            count_staged=""
        fi

        # M == Modified and Unstaged ●
        # D == Deleted  -
        # R == Renamed  R
        # C == Copied   C
        # U == Updated but Unmerged
        # A == Added
        # "??" == Untracked
        local gitprompt="${sep}${lb}${gitbranch}${count_staged}${count_modified}${count_untracked}${rb}"
    fi

    echo ""
    echo -n "${lb}${last_status}${rb}"
    echo -n "${sep}"
    echo -n "${lb}${time}${rb}"
    #echo -n "${sep}"
    #echo -n "${lb}${login}${rb}"
    echo -n "${virtualenv}"
    echo -n "${sep}"
    echo -n "${lb}${directory}${rb}"
    echo -n "${gitprompt}"
    echo ""
    echo "$ "
}

date-utc-to-au() {
    FOUNDEPOCH=$(TZ=UTC date +%s -d "$@")
    echo -en "$FOUNDEPOCH\t"
    TZ="Australia/Sydney" date -d @${FOUNDEPOCH}
}

gitcopush() {
    set -eu

    GIT_DESCRIPTION=$*
    JIRA_URL='https://extranet.atlassian.com/jira'
    TICKET_NUM="${1^^}"

    if [[ ${TICKET_NUM:0:7} != "PURSRE-" && ${TICKET_NUM:0:4} != "PUR-" && ${TICKET_NUM:0:5} != "PLSE-" ]]; then
        echo "No ticket detected. Creating new ticket"

        PROJECT_KEY="PURSRE"
        TICKET_NUM=$(curl \
            --silent \
            --data "{ \"fields\": { \"reporter\":{\"name\": \"${USER}\" }, \"assignee\":{\"name\":\"${USER}\"}, \"project\": { \"key\": \"$PROJECT_KEY\" }, \"summary\": \"$GIT_DESCRIPTION\", \"description\": \"$GIT_DESCRIPTION\", \"issuetype\": { \"name\": \"Task\" } } }" \
            --user "${USER}" \
            -X POST \
            --header "Content-Type: application/json" \
            $JIRA_URL/rest/api/2/issue/ | \
            jq '.key')
        TICKET_NUM="${TICKET_NUM//\"/}"
        GIT_DESCRIPTION="${TICKET_NUM} ${GIT_DESCRIPTION}"
    fi

    BRANCH_NAME="${GIT_DESCRIPTION//[ \.]/_}"
    git checkout -b "$BRANCH_NAME"
    git commit --patch --interactive -m "$GIT_DESCRIPTION"
    git push 2>&1 | tee "/tmp/$BRANCH_NAME"

    google-chrome $(grep -A1 "Create pull request for" "/tmp/$BRANCH_NAME" | perl -nle 'print $1 if m#(https://(stash.atlassian.com|bitbucket.org)\S+)#')
    sleep 0.5
    google-chrome "${JIRA_URL}/browse/${TICKET_NUM}"
    set +eu
}

# Theme / PS1 / Colors
PROMPT_COMMAND='PS1="$(bash_prompt)"'

# base16-shell (https://github.com/chriskempson/base16-shell)
# Base16 Shell template by Chris Kempson (http://chriskempson.com)
# Tomorrow Night scheme by Chris Kempson (http://chriskempson.com)
function base16 () {
    color00="1d/1f/21" # Base 00 - Black
    color01="cc/66/66" # Base 08 - Red
    color02="b5/bd/68" # Base 0B - Green
    color03="f0/c6/74" # Base 0A - Yellow
    color04="81/a2/be" # Base 0D - Blue
    color05="b2/94/bb" # Base 0E - Magenta
    color06="8a/be/b7" # Base 0C - Cyan
    color07="c5/c8/c6" # Base 05 - White
    color08="96/98/96" # Base 03 - Bright Black
    color09=$color01 # Base 08 - Bright Red
    color10=$color02 # Base 0B - Bright Green
    color11=$color03 # Base 0A - Bright Yellow
    color12=$color04 # Base 0D - Bright Blue
    color13=$color05 # Base 0E - Bright Magenta
    color14=$color06 # Base 0C - Bright Cyan
    color15="ff/ff/ff" # Base 07 - Bright White
    color16="de/93/5f" # Base 09
    color17="a3/68/5a" # Base 0F
    color18="28/2a/2e" # Base 01
    color19="37/3b/41" # Base 02
    color20="b4/b7/b4" # Base 04
    color21="e0/e0/e0" # Base 06
    color_foreground="c5/c8/c6" # Base 05
    color_background="1d/1f/21" # Base 00
    color_cursor="c5/c8/c6" # Base 05

    if [ -n "$TMUX" ]; then
        # Tell tmux to pass the escape sequences through
        # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
        printf_template="\033Ptmux;\033\033]4;%d;rgb:%s\007\033\\"
        printf_template_var="\033Ptmux;\033\033]%d;rgb:%s\007\033\\"
        printf_template_custom="\033Ptmux;\033\033]%s%s\007\033\\"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf_template="\033P\033]4;%d;rgb:%s\007\033\\"
        printf_template_var="\033P\033]%d;rgb:%s\007\033\\"
        printf_template_custom="\033P\033]%s%s\007\033\\"
    else
        printf_template="\033]4;%d;rgb:%s\033\\"
        printf_template_var="\033]%d;rgb:%s\033\\"
        printf_template_custom="\033]%s%s\033\\"
    fi

    # We only require the 256-bit colors, colors 0-15 are handled correctly by .Xresources
    printf $printf_template 16 $color16
    printf $printf_template 17 $color17
    printf $printf_template 18 $color18
    printf $printf_template 19 $color19
    printf $printf_template 20 $color20
    printf $printf_template 21 $color21

    # clean up
    unset printf_template
    unset printf_template_var
    unset color00
    unset color01
    unset color02
    unset color03
    unset color04
    unset color05
    unset color06
    unset color07
    unset color08
    unset color09
    unset color10
    unset color11
    unset color12
    unset color13
    unset color14
    unset color15
    unset color16
    unset color17
    unset color18
    unset color19
    unset color20
    unset color21
    unset color_foreground
    unset color_background
    unset color_cursor
}

base16

# Environment variables
export GOPATH="$HOME/go"
export PATH="$PATH:$HOME/node_modules/.bin:$HOME/.gem/ruby/2.5.0/bin:$GOPATH/bin"
export TERM='rxvt-256color'
export EDITOR='vim'

export HISTFILESIZE=500000
export HISTCONTROL=ignoreboth
export HISTSIZE=500000

# &    => ignore duplicate commands
# [ ]* => ignore commands starting with a space
# exit => forget exit
export HISTIGNORE="&:[ ]*:exit:ls:clear:l:la:c:gla:g"
export HISTTIMEFORMAT='%F %T '

shopt -s histappend
PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

source "/usr/bin/virtualenvwrapper.sh" 1>/dev/null
# TODO: Check this
#source "/etc/profile.d/autojump.bash"

SSH_ENV="$HOME/.ssh/agent-environment"

function start_agent {
    /usr/bin/ssh-agent > "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    #/usr/bin/ssh-add $HOME/.ssh/atlassian
}

if [[ -f "${SSH_ENV}" ]]; then
    . "${SSH_ENV}" > /dev/null
    ps -ef | grep ${SSH_AGENT_PID} | grep -e "ssh-agent$" > /dev/null || {
        start_agent
    }
else
    start_agent
fi
