#!/bin/zsh

alias src="source ~/.zshrc"

# Behaviour correction
function ifconfig() {
    echo "ifconfig is deprecated"
    echo "use 'ip addr show' or 'ip a' for short"
}

# Provide a better name
alias manual=man

# Specialized commands
alias murder="shred -uvzn 20"
alias please="sudo !!"

# Common code commands
alias vim="vim -O"
alias ..="cd .."
alias ...="cd ../.."
alias ag="ag --color -H --width 200 --skip-vcs-ignores"
alias tree="tree -C"

# Columns!
alias C1="awk '{print \$1}'"
alias C2="awk '{print \$2}'"
alias C3="awk '{print \$3}'"
alias C4="awk '{print \$4}'"
alias C5="awk '{print \$5}'"
alias C6="awk '{print \$6}'"
alias C7="awk '{print \$7}'"
alias C8="awk '{print \$8}'"
alias sum="awk '{sum+=\$1} END {print sum}'"

# Common command line commands
alias c="clear"
alias cls="clear && ls -l"
alias clt="clear && tree"
alias less="less -r"
alias ls="ls --color=auto"
alias l="ls -ohL --group-directories-first"
alias lt="ls -lhtc"
alias la="ls -lha --group-directories-first"
alias ll="ls -l --group-directories-first"
alias rm="rm -i"
alias cp="cp -i"
alias grep="grep -i --color"

# Keychain commands
id_rsas=$(ls --ignore="*.pub" -w 1 ~/.ssh/ | grep "^id_" | tr '\n' ' ')
alias kc="eval \`keychain --eval --agents ssh --timeout 480 --quiet $id_rsas\`"

# Aliases for Git
alias g="/usr/bin/git status"
alias gu="kc && /usr/bin/git pull"
alias gp="kc && /usr/bin/git push"
alias ga="/usr/bin/git add"
alias gd="/usr/bin/git diff --color-words"
alias gda="/usr/bin/git diff --color-words -U99999"
alias gs="/usr/bin/git stash"
alias gb="/usr/bin/git branch"
alias gba="/usr/bin/git branch -a"
alias gc="/usr/bin/git commit"
alias gca="/usr/bin/git commit -a"
alias gcl="kc && /usr/bin/git clone"
alias gco="/usr/bin/git checkout"
alias gm="/usr/bin/git merge --no-ff"
alias gff="/usr/bin/git merge --ff-only"
alias gt="/usr/bin/git worktree"

# https://git-scm.com/docs/pretty-formats
GIT_LOG_FORMAT='%Cred%h%Creset -%C(yellow)%-d%C(reset) %s %C(green)(%cr)%C(reset) %C(bold blue)%an%C(reset)'
GIT_LOG_FORMAT_SIMPLE='%Cred%h%Creset - %s %C(green)(%cr)%C(reset) %C(bold blue)%an%C(reset)'
alias gl="/usr/bin/git log --date-order --graph --pretty=format:'${GIT_LOG_FORMAT}' --abbrev-commit --date=relative"
alias gla="/usr/bin/git log --date-order --graph --pretty=format:'${GIT_LOG_FORMAT}' --abbrev-commit --date=relative --all"
alias gls="/usr/bin/git log --date-order --graph --pretty=format:'${GIT_LOG_FORMAT_SIMPLE}' --abbrev-commit --date=relative"
alias gll="/usr/bin/git log --date-order --graph --oneline"

function gta() {
    # Create a new git worktree for the current repo
    if [ $# -eq 0 ]; then echo "Please supply the branch name"; fi
    repo_name=$(basename -s .git `git config --get remote.origin.url`)
    default_branch_name=$(get_or_set_default_branch_ref)
    git worktree add -b $1 ../$repo_name-$1 $default_branch_name
    cd ../$repo_name-$1
}

function gur() {
    # Rebase off the default branch. Handles if there's any changes to stash
    change=$(git stash | grep "No local changes to save")
    default_branch_name=$(get_or_set_default_branch_ref)
    kc && /usr/bin/git pull --rebase origin $default_branch_name
    if [[ ! $change ]]; then git stash apply; fi
}

function get_or_set_default_branch_ref() {
    # Get the default branch via the origin's HEAD ref. If it doesn't exist locally, then query and set it
    default_branch_name=$(basename `git symbolic-ref refs/remotes/origin/HEAD 2> /dev/null` 2> /dev/null)
    if [[ $? -ne 0 ]]; then
        # To easily figure out the default branch in the future, set the "origin/HEAD" ref
        default_branch_name=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
        git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/$default_branch_name
    fi
    echo $default_branch_name
}

# Docker
alias d="/usr/bin/docker"
alias dn="/usr/bin/docker network"
alias de="/usr/bin/docker exec"
alias dc="/usr/bin/docker container"
alias dca="/usr/bin/docker container attach"
alias dps="/usr/bin/docker container ls --format \"table {{.Names}} \t {{.Image}} \t {{.RunningFor}} \t {{.Status}} \t {{.Ports}}\" "
# Stops all running containers
alias dsa='/usr/bin/docker stop $(/usr/bin/docker ps -q)'

function dsh () {
    /usr/bin/docker exec -it $1 /bin/sh
}

# Docker Compose
alias dk="/usr/bin/docker compose"
alias dkps="/usr/bin/docker compose ps"

# Applications
alias feh="feh --auto-zoom --borderless --draw-filename --geometry 800x600"
alias ffplay="ffplay -nodisp"

export FZF_DEFAULT_COMMAND='ag -g ""'
alias fzf="fzf --preview='cat {}'"

function va() {
    for dir in .venv venv; do
        if [[ -d $dir ]]; then
            source "${dir}/bin/activate"
            return 0
        fi
    done
    echo "Failed to activate virtual environment."
    return 1
}

# Python virtualenv
alias workoff='deactivate'

# Look at logs of all containers that listen on port 8080
alias docker-logs-check='while ((1)); do docker logs -f $(docker ps | grep 8080 | cut -f1 -d" ") 2>/dev/null; sleep 1; echo No docker container; done'

# Uncomment if on Linux and Docker requires sudo access
#alias docker="sudo /usr/bin/docker"

# Avoid remembering the untar flags
alias untar="tar xf"

# Mount and set permissions properly (files: rw- r-- r--, dir: rwxr-xr-x)
alias m="sudo mount -o uid=$USER,fmask=0133,dmask=0022"

# Rick Roll
alias rick-roll="curl -s -L http://bit.ly/10hA8iC | bash"

# Starts i3 in a nested X server
alias test-i3="Xephyr -resizeable :5 & sleep 1; DISPLAY=:5 i3"

# Auto-tune any "bad" settings in powertop
alias auto-powertop="sudo powertop --auto-tune"

# Easily copy a file's contents to a helpful clipboard
alias copy-file="xclip -in -selection clipboard"

# Take a screenshot and parse the QR code from it
alias qr-scan="flameshot gui --raw | zbarimg - | sed 's/^QR-Code://g' | xclip -selection clipboard 2>/dev/null"

# Send input audio to output audio, so I can test if I sound okay
alias loopback-mic="echo -n 'Press Enter to stop' && pactl load-module module-loopback > /dev/null && read && pactl unload-module module-loopback"

# Reload dunst for updated config to take effect
alias reload-dunst="killall dunst; notify-send 'Dunst is reloaded'"

# Run a diff using kitty terminal's built-in diff kitten
alias diff-kitty="kitty +kitten diff"

# I like using `python` without needing to specify the version
alias python="python3"

# Easy access to MacOS' built-in pdf combining tool
alias pdfunite-macos="/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/MacOS/join"

# Suspend Hobbiton
# ssh hobbiton
# echo 'pm-suspend' | sudo at now + 1 minutes; exit

date-utc-to-au() {
    FOUND_EPOCH=$(TZ=UTC date +%s -d "$@")
    echo -en "$FOUND_EPOCH\t"
    TZ="Australia/Sydney" date -d @${FOUND_EPOCH}
}

year-and-month-to-fy() {
    # Convert a given year + month to financial year
    # E.g: `year-and-month-to-fy 2022 3` -> `2022`
    # E.g: `year-and-month-to-fy 2022 7` -> `2023`
    python -c "import math; print(math.ceil(((($1 + ($2/12)) * 12) - 6) / 12))"
}
