#!/bin/bash

alias src="source ~/.bashrc"

# Behaviour correction
function ifconfig() {
    echo "ifconfig is deprecated"
    echo "use 'ip addr show' or 'ip a' for short"
}

# Specialized commands
alias murder="shred -uvzn 20"
alias please="sudo !!"

# Common code commands
alias vim="vim -O"
alias ..="cd .."
alias ...="cd ../.."
alias ag="ag --color -H --width 200 --skip-vcs-ignores"
alias tree="tree -C"

alias py2="python2"
alias py3="python3"

# Columns!
alias C1="awk '{print \$1}'"
alias C2="awk '{print \$2}'"
alias C3="awk '{print \$3}'"
alias C4="awk '{print \$4}'"
alias C5="awk '{print \$5}'"
alias C6="awk '{print \$6}'"
alias C7="awk '{print \$7}'"
alias C8="awk '{print \$8}'"
alias sum="awk '{sum+=\$1} END {print sum}'"

# Common command line commands
alias c="clear"
alias cls="clear && ls -l"
alias clt="clear && tree"
alias less="less -r"
alias ls="ls --color=auto"
alias l="ls -ohL --group-directories-first"
alias lt="ls -lhtc"
alias la="ls -lha --group-directories-first"
alias ll="ls -l --group-directories-first"
alias rm="rm -i"
alias cp="cp -i"
alias grep="grep -i --color"

# Keychain commands
id_rsas=$(ls --ignore="*.pub" -w 1 ~/.ssh/ | grep "^id_" | tr '\n' ' ')
alias kc="eval \`keychain --eval --agents ssh --timeout 480 --quiet $id_rsas\`"

# Aliases for Git
alias g="/usr/bin/git status"
alias gu="kc && /usr/bin/git pull"
alias gp="kc && /usr/bin/git push"
alias ga="/usr/bin/git add"
alias gd="/usr/bin/git diff"
alias gda="/usr/bin/git diff -U99999"
alias gs="/usr/bin/git stash"
alias gb="/usr/bin/git branch"
alias gba="/usr/bin/git branch -a"
alias gc="/usr/bin/git commit"
alias gca="/usr/bin/git commit -a"
alias gcl="kc && /usr/bin/git clone"
alias gco="/usr/bin/git checkout"
alias gm="/usr/bin/git merge --no-ff"
alias gff="/usr/bin/git merge --ff-only"
alias gt="/usr/bin/git worktree"

# https://git-scm.com/docs/pretty-formats
#GIT_LOG_FORMAT='%Cred%h%Creset -%C(yellow)%-d%C(reset) %s %C(green)[%cr]%C(reset) %C(bold blue)%an <%ae>%C(reset) %C(cyan)%G?%C(reset)'
GIT_LOG_FORMAT='%Cred%h%Creset -%C(yellow)%-d%C(reset) %s %C(green)(%cr)%C(reset) %C(bold blue)%an%C(reset)'
GIT_LOG_FORMAT_SIMPLE='%Cred%h%Creset - %s %C(green)(%cr)%C(reset) %C(bold blue)%an%C(reset)'
alias gl="/usr/bin/git log --date-order --graph --pretty=format:'${GIT_LOG_FORMAT}' --abbrev-commit --date=relative"
alias gla="/usr/bin/git log --date-order --graph --pretty=format:'${GIT_LOG_FORMAT}' --abbrev-commit --date=relative --all"
alias gls="/usr/bin/git log --date-order --graph --pretty=format:'${GIT_LOG_FORMAT_SIMPLE}' --abbrev-commit --date=relative"
alias gll="/usr/bin/git log --date-order --graph --oneline"

function gta() {
    # Create a new git worktree for the current repo
    if [ $# -eq 0 ]; then echo "Please supply the branch name"; fi
    repo_name=$(basename -s .git `git config --get remote.origin.url`)
    default_branch_name=$(basename `git symbolic-ref refs/remotes/origin/HEAD`)
    git worktree add -b $1 ../$repo_name-$1 $default_branch_name
    cd ../$repo_name-$1
}

function gur() {
    # Rebase off the default branch. Handles if there's any changes to stash
    change=$(git stash | grep "No local changes to save")
    default_branch_name=$(basename `git symbolic-ref refs/remotes/origin/HEAD`)
    kc && /usr/bin/git pull --rebase origin $default_branch_name
    if [[ ! $change ]]; then git stash apply; fi
}

function gc_scott() {
    if git status &>/dev/null; then
        user_name=$(git config user.name)
        user_mail=$(git config user.email)
        user="${user_name} <${user_mail}>"

        signer=""
        user_key=$(git config user.signingkey)
        if [[ ! -z "${user_key}" ]]; then
            if gpg --list-keys --with-colons ${user_key} &>/dev/null; then
                uid=$(gpg --list-keys --with-colons ${user_key} | awk -F: '/^uid:/ { print $10 }')
                pub=$(gpg --list-keys --with-colons ${user_key} | awk -F: '/^pub:/ { print $5 }')
            fi
        else
            echo "No signingkey configured to commit with"
            exit 1
        fi

        echo -e "You will commit as ${user}"
        echo -e "You will sign the commit as ${uid}"
        echo -e "You will with the commit with ${user_key} belonging to ${pub}"
        echo -e "Do you want to continue? (ENTER)"
        read -n 1
    fi

    /usr/bin/git commit -S "$@"
}

function gca_scott() {
    if git status &>/dev/null; then
        user_name=$(git config user.name)
        user_mail=$(git config user.email)
        user="${user_name} <${user_mail}>"
        echo -e "Committing as -- ${user}\n\nDo this? (enter)"
        read -n 1
    fi

    /usr/bin/git commit -a "$@"
}

function gp_scott() {
    if /usr/bin/git status &>/dev/null; then
        /usr/bin/git push -nv 2>&1 | head -n -1
        echo -e "\nDo this? (enter)"
        read -n 1
    fi
}

gitcopush() {
    # TODO: Extract useful parts
    set -eu

    GIT_DESCRIPTION=$*
    TICKET_NUM="${1^^}"

    BRANCH_NAME="${GIT_DESCRIPTION//[ \.]/_}"
    git checkout -b "$BRANCH_NAME"
    git commit --patch --interactive -m "$GIT_DESCRIPTION"
    git push 2>&1 | tee "/tmp/$BRANCH_NAME"

    google-chrome $(grep -A1 "Create pull request for" "/tmp/$BRANCH_NAME" | perl -nle 'print $1 if m#(https://(stash.atlassian.com|bitbucket.org)\S+)#')
    set +eu
}

# Docker
alias d="/usr/bin/docker"
alias dn="/usr/bin/docker network"
alias de="/usr/bin/docker exec"
alias dc="/usr/bin/docker container"
alias dca="/usr/bin/docker container attach"
alias dps="/usr/bin/docker container ls --format \"table {{.Names}} \t {{.Image}} \t {{.RunningFor}} \t {{.Status}} \t {{.Ports}}\" "

function dsh () {
    /usr/bin/docker exec -it $1 /bin/sh
}

# Docker Compose
alias dk="/usr/bin/docker-compose"
alias dkps="/usr/bin/docker-compose ps"

# Kubernetes
function kubectl() {
    echo "use 'k' instead"
}

alias k="/usr/bin/kubectl"
alias kg="/usr/bin/kubectl get"
alias kd="/usr/bin/kubectl get"
alias kcg="/usr/bin/kubectl config get-contexts"
alias kcu="/usr/bin/kubectl config use-context"
alias kcc="/usr/bin/kubectl config current-context"
alias kaf="/usr/bin/kubectl apply -f"

function kcurrctx() {
    target="$HOME/.kube/config"
    if [[ ! -r "$target" ]]; then
        echo "Could not read $target - Do you have a kubectl configured?"
        return 1
    fi

    if which yq 2>&1 1>/dev/null; then
        yq -r '.["current-context"]' < "$target"
    else
        awk -F': ' '/^current-context: /{print $2}' < "$target"
    fi
}

# Applications
alias feh="feh --auto-zoom --borderless --draw-filename --geometry 800x600"
alias ffplay="ffplay -nodisp"

export FZF_DEFAULT_COMMAND='ag -g ""'
alias fzf="fzf --preview='cat {}'"

function va() {
    for dir in .venv venv; do
        if [[ -d $dir ]]; then
            source "${dir}/bin/activate"
            return 0
        fi
    done
    echo "Failed to activate virtual environment."
    return 1
}

alias rebuild_ctags="cd ~/code/; ctags -R --python-kinds=-i"

# Custom from Elie

# Python virtualenv
alias workoff='deactivate'
alias mkvirtualenv2="mkvirtualenv -p /usr/bin/python2.7"

# Set up nvm. --no-use speeds up the command a lot
source "/usr/share/nvm/init-nvm.sh" --no-use

# Look at logs of all containers that listen on port 8080
alias docker-logs-check='while ((1)); do docker logs -f $(docker ps | grep 8080 | cut -f1 -d" ") 2>/dev/null; sleep 1; echo No docker container; done'

# Docker requires sudo access (Temporarily disabling this)
alias docker="/usr/bin/docker"
alias docker-compose="/usr/bin/docker-compose"

# Arch Linux way of handling Java versions
source "/etc/profile.d/jre.sh"

alias untar="tar xf"

# Mount and set permissions properly (files: rw- r-- r--, dir: rwxr-xr-x)
alias m="sudo mount -o uid=$USER,fmask=0133,dmask=0022"

# Rick Roll
alias rick-roll="curl -s -L http://bit.ly/10hA8iC | bash"

# Starts awesome/i3 in a nested X server
alias test-awesome="Xephyr -resizeable :5 & sleep 1; DISPLAY=:5 awesome"
alias test-i3="Xephyr -resizeable :5 & sleep 1; DISPLAY=:5 i3"

# Auto-tune any "bad" settings in powertop
alias auto-powertop="sudo powertop --auto-tune"

# Easily copy a file's contents to a helpful clipboard
alias copy-file="xclip -i -selection c"

# Send input audio to output audio, so I can test if I sound okay
alias loopback-mic="echo -n 'Press Enter to stop' && pactl load-module module-loopback > /dev/null && read && pactl unload-module module-loopback"

# Source additional bashrc config specific to work
source ~/.bashrc_work

# Suspend Hobbiton
# ssh hobbiton
# echo 'pm-suspend' | sudo at now + 1 minutes; exit

date-utc-to-au() {
    FOUND_EPOCH=$(TZ=UTC date +%s -d "$@")
    echo -en "$FOUND_EPOCH\t"
    TZ="Australia/Sydney" date -d @${FOUND_EPOCH}
}
